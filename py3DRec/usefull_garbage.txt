#k = np.mat(([[ 683.39404297,    0.        ,  267.21336591], [   0.        ,  684.3449707 ,  218.56421036],  [   0.        ,    0.        ,    1.        ]]))

#pt = np.array([[ -50.0000 , 0.0000, 450.0000], 
#[ -50.0000 , 0.0000, 550.0000], 
#[ 50.0000 , 0.0000, 550.0000], 
#[ 50.0000 , 0.0000, 450.0000], 
#[ -50.0000 , 0.0000, 450.0000], 
#[ -50.0000 , 50.0000, 450.0000], 
#[ -50.0000 , 50.0000, 550.0000], 
#[ 50.0000 , 50.0000, 550.0000], 
#[ 50.0000 , 50.0000, 450.0000], 
#[ -50.0000 , 50.0000, 450.0000], 
#[ -25.0000 , 50.0000, 475.0000], 
#[ -25.0000 , 50.0000, 525.0000], 
#[ 25.0000 , 50.0000, 525.0000], 
#[ 25.0000 , 50.0000, 475.0000], 
#[ -25.0000 , 50.0000, 475.0000], 
#[ -25.0000 , 75.0000, 475.0000], 
#[ -25.0000 , 75.0000, 525.0000], 
#[ 25.0000 , 75.0000, 525.0000], 
#[ 25.0000 , 75.0000, 475.0000], 
#[ -25.0000 , 75.0000, 475.0000], 
#[ -23.7500 , 80.0000, 476.2500], 
#[ -23.7500 , 80.0000, 523.7500], 
#[ 23.7500 , 80.0000, 523.7500], 
#[ 23.7500 , 80.0000, 476.2500], 
#[ -23.7500 , 80.0000, 476.2500], 
#[ -22.5625 , 85.0000, 477.4375], 
#[ -22.5625 , 85.0000, 522.5625], 
#[ 22.5625 , 85.0000, 522.5625], 
#[ 22.5625 , 85.0000, 477.4375], 
#[ -22.5625 , 85.0000, 477.4375], 
#[ -21.4344 , 90.0000, 478.5656], 
#[ -21.4344 , 90.0000, 521.4344], 
#[ 21.4344 , 90.0000, 521.4344], 
#[ 21.4344 , 90.0000, 478.5656], 
#[ -21.4344 , 90.0000, 478.5656], 
#[ -20.3627 , 95.0000, 479.6373], 
#[ -20.3627 , 95.0000, 520.3627], 
#[ 20.3627 , 95.0000, 520.3627], 
#[ 20.3627 , 95.0000, 479.6373], 
#[ -20.3627 , 95.0000, 479.6373], 
#[ -19.3445 , 100.0000, 480.6555], 
#[ -19.3445 , 100.0000, 519.3445], 
#[ 19.3445 , 100.0000, 519.3445], 
#[ 19.3445 , 100.0000, 480.6555], 
#[ -19.3445 , 100.0000, 480.6555], 
#[ -18.3773 , 105.0000, 481.6227], 
#[ -18.3773 , 105.0000, 518.3773], 
#[ 18.3773 , 105.0000, 518.3773], 
#[ 18.3773 , 105.0000, 481.6227], 
#[ -18.3773 , 105.0000, 481.6227], 
#[ -17.4584 , 110.0000, 482.5416], 
#[ -17.4584 , 110.0000, 517.4584], 
#[ 17.4584 , 110.0000, 517.4584], 
#[ 17.4584 , 110.0000, 482.5416], 
#[ -17.4584 , 110.0000, 482.5416], 
#[ -16.5855 , 115.0000, 483.4145], 
#[ -16.5855 , 115.0000, 516.5855], 
#[ 16.5855 , 115.0000, 516.5855], 
#[ 16.5855 , 115.0000, 483.4145], 
#[ -16.5855 , 115.0000, 483.4145], 
#[ -15.7562 , 120.0000, 484.2438], 
#[ -15.7562 , 120.0000, 515.7562], 
#[ 15.7562 , 120.0000, 515.7562], 
#[ 15.7562 , 120.0000, 484.2438], 
#[ -15.7562 , 120.0000, 484.2438], 
#[ -14.9684 , 125.0000, 485.0316], 
#[ -14.9684 , 125.0000, 514.9684], 
#[ 14.9684 , 125.0000, 514.9684], 
#[ 14.9684 , 125.0000, 485.0316], 
#[ -14.9684 , 125.0000, 485.0316]])

#Reconstruction.clsReconstruction.saveData(pt,'pt_test.dat')

#Reconstruction.clsReconstruction.saveData(k,'k_cam_hp.dat')



#sift = cv2.xfeatures2d.SIFT_create()
		#sift.compute(

		#dense=cv2.FeatureDetector_create('Dense')
		
		#freak = cv2.xfeatures2d.FREAK_create()
		#kp_f1, des_f1 = freak.detectAndCompute(im_1,None)
		#kp_f2, des_f2 = freak.detectAndCompute(im_2,None)

		#bf = cv2.BFMatcher()
		#matches = bf.knnMatch(des_1,des_2,k=2)
		#good = []
		#for m,n in matches:
		#	if m.distance < 0.4*n.distance:
		#		good.append([m])

		#img3 = cv2.drawMatchesKnn(im_1,kp_1,im_2,kp_2,good,im_1,flags=2)

		#plt.imshow(img3),plt.show()

		

				
		##select points to evaluate the fundamental matrix
		#Pts1 = []
		#Pts2 = []
		#Tg = []
		#dx = im_1.shape[1]

		#for i in matches:
		#	p1 = kp_1[i.queryIdx].pt
		#	p2 = kp_2[i.trainIdx].pt
		#	Pts1.append(p1)
		#	Pts2.append(p2)
		#	tg = np.arctan2(p2[0] - p1[0],dx + p2[1] - p1[1])
		#	Tg.append(tg)

		#		#get the grid to project onto
		#x_grid = np.linspace(-np.pi/3, np.pi/3, 90)
		#vTg = np.array(Tg)
		##evaluate the KDEpdf
		#kde_pdf = stats.gaussian_kde(vTg).evaluate(x_grid)
		#xmax = x_grid[kde_pdf.argmax()]